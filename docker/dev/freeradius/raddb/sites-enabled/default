
server default {

listen {
	type = auth
	ipaddr = *
	port = 0
}

listen {
	ipaddr = *
	port = 0
	type = acct
}

authorize {
	#logging
	if (!&session-state:) {
		update session-state {
			&Tmp-String-1 := "request"
		}
		linelog
	}

	filter_username

	# SSID-spezifische Logik vor Standard-Modulen
	# Called-Station-Id Format: AA-BB-CC-DD-EE-FF:SSID-Name
	if (&Called-Station-Id =~ /:eduroam$/i) {

		# Realm-basierte EAP-Instanz Auswahl (ad.est1816.de)
		if (&User-Name =~ /^host\/.*\.ad\.est1816\.de$/i) {
			eap-ad-est1816-de {
				ok = return
				updated = return
			}
		}
		# Realm-basierte EAP-Instanz Auswahl (tfh-bochum.de)
		elsif (&User-Name =~ /^host\/.*\.tfh-bochum\.de$/i) {
			eap-tfh-bochum-de {
				ok = return
				updated = return
			}
		}
		# Standard EAP für lokale TTLS-PAP Benutzer
		elsif (&User-Name =~ /@(stud\.)?(dmt-lb|bergbaumuseum|thga)\.de$/i) {
			split_username_nai
			eap {
				ok = return
				updated = return
			}
		}
		# Remote eduroam User
		# The details of the radsecproxy servers
		# are in proxy.conf.
		else {
			update {
				control:Load-Balance-Key := &Calling-Station-ID
				control:Proxy-To-Realm := 'radsecproxy'
				
				# Operator name (RFC 5580) identifies the network the 
				# request originated from. It's not absolutely necessary
				# but it helps with debugging.
				request:Operator-Name := "1thga.de"
			}
			return
		}
	}
	# IoT Geräte
	elsif (&Called-Station-Id =~ /:iotdevices$/i) {

		# MAC-Auth: 12-stellige Hex-Strings  
		if ("%{User-Name}" =~ /^[a-fA-F0-9]{12}$/) {
			if ("%{sql:SELECT COUNT(*) FROM rad_mac_auth WHERE username = '%{User-Name}'}") {
				update control {
					&Auth-Type := Accept
					&Tunnel-Password := "%{sql:SELECT tunnel_password FROM rad_mac_auth WHERE username = '%{User-Name}'}"
				}
				ok = return
			}
		}
	}
	# Captive Portal
	elsif (&Called-Station-Id =~ /:THGA$/i) {
        if ("%{sql:SELECT COUNT(*) FROM radcheck_guests WHERE Username='%{User-Name}' AND password='%{User-Password}'}") {
            update control {
                &Auth-Type := Accept
            }
            ok = return
        }
		#ldap
		if (ok) {
			update control {
				&Auth-Type := Accept
			}
			ok = return
		}
	}

}
authenticate {
	# sql und ldap setzen Accept in Authorize
	Auth-Type Accept {
		ok  # Akzeptiere ohne weitere Prüfung
	}
	eap
	eap-ad-est1816-de
	eap-tfh-bochum-de
}

pre-proxy {
	attr_filter.pre-proxy
}

post-proxy {
	attr_filter.post-proxy
}

post-auth {
	update reply {
		Tunnel-Type := VLAN
		Tunnel-Medium-Type := IEEE-802
	}
	# VLAN-Zuweisung

	if (&Called-Station-Id =~ /:eduroam$/i) {

		# Spezielle VLANs für Computer-Accounts
		if (&User-Name =~ /^host\/.*\.ad\.est1816\.de$/i) {
			update reply {
				&Tunnel-Private-Group-Id := "82"
			}
		}
		elsif (&User-Name =~ /^host\/.*\.tfh-bochum\.de$/i) {
			update reply {
				&Tunnel-Private-Group-Id := "124"
			}
		}
		else {
			update reply {
				&Tunnel-Private-Group-Id := "144"
			}
		}
	}
	elsif (&Called-Station-Id =~ /:iotdevices$/i) {
		update reply {
			&Tunnel-Private-Group-Id := "148"
		}
	}
	elsif (&Called-Station-Id =~ /:THGA$/i) {
		update reply {
			&Tunnel-Private-Group-Id := "140"
		}
	}
	
	# SQL für VLAN-Override (Admin kann VLAN überschreiben)
	if ("%{sql:SELECT vlan_id FROM rad_vlan_override WHERE mac_address = UPPER(REPLACE('%{Calling-Station-Id}', '-', ':')) LIMIT 1}") {
		update reply {
			&Tunnel-Private-Group-Id := "%{sql:SELECT vlan_id FROM rad_vlan_override WHERE mac_address = UPPER(REPLACE('%{Calling-Station-Id}', '-', ':')) LIMIT 1}"
		}
	}

	# inner-tunnel Usernames sind pseudonym und
	# können nach außen übermittelt werden
	if (&session-state:User-Name) {
		update reply {
			User-Name := "%{session-state:User-Name}"
		}
	}

	# logging
	update session-state {
		&Tmp-String-1 := "accept"
	}
	linelog

	Post-Auth-Type REJECT {
		attr_filter.access_reject
		
		#logging
		update session-state {
			&Tmp-String-1 := "reject"
		}
		linelog
	}
}
}
