#!/bin/bash
set -e

psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL


CREATE DATABASE radius;
\c radius
CREATE TABLE public.eduroam_eduroamaccount (
	id int8 GENERATED BY DEFAULT AS IDENTITY( MINVALUE 0 NO MAXVALUE START 0 NO CYCLE) NOT NULL,
	created_at timestamptz NOT NULL,
	updated_at timestamptz NOT NULL,
	username varchar(254) NOT NULL,
	"password" varchar(510) NOT NULL,
	"comment" varchar(510) NOT NULL,
	realm varchar(510) NOT NULL,
	status int4 NOT NULL,
	owner_id int4 NOT NULL,
	end_date timestamptz NULL,
	start_date timestamptz NULL,
	CONSTRAINT eduroam_eduroamaccount_pkey PRIMARY KEY (id),
	CONSTRAINT eduroam_eduroamaccount_username_key UNIQUE (username)
);
CREATE INDEX eduroam_eduroamaccount_owner_id_cf244aa1 ON public.eduroam_eduroamaccount (owner_id);
CREATE INDEX eduroam_eduroamaccount_username_730969f3_like ON public.eduroam_eduroamaccount (username);

CREATE TABLE public.vlanoverride_vlanoverride (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	created_at timestamptz NOT NULL,
	updated_at timestamptz NOT NULL,
	status int4 NOT NULL,
	start_date timestamptz NULL,
	end_date timestamptz NULL,
	mac_address varchar(17) NOT NULL,
	vlan_id int4 NOT NULL,
	"comment" varchar(510) NOT NULL,
	CONSTRAINT vlanoverride_vlanoverride_pkey PRIMARY KEY (id)
);


CREATE TABLE public.iotdevices_iotdeviceaccount (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	created_at timestamptz NOT NULL,
	updated_at timestamptz NOT NULL,
	"password" varchar(510) NOT NULL,
	status int4 NOT NULL,
	start_date timestamptz NULL,
	end_date timestamptz NULL,
	mac_address varchar(17) NOT NULL,
	owner_id int4 NOT NULL,
	device_name varchar(510) NOT NULL,
	CONSTRAINT iotdevices_iotdeviceaccount_pkey PRIMARY KEY (id)
);
CREATE INDEX iotdevices_iotdeviceaccount_owner_id_48f639f6 ON public.iotdevices_iotdeviceaccount USING btree (owner_id);

CREATE TABLE public.events_eventguest (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	created_at timestamptz NOT NULL,
	updated_at timestamptz NOT NULL,
	username varchar(254) NOT NULL,
	"password" varchar(510) NOT NULL,
	status int4 NOT NULL,
	start_date timestamptz NULL,
	end_date timestamptz NULL,
	event_id int8 NOT NULL,
	owner_id int4 NOT NULL,
	CONSTRAINT events_eventguest_email_key UNIQUE (username),
	CONSTRAINT events_eventguest_pkey PRIMARY KEY (id)
);
CREATE INDEX events_eventguest_email_e62f8994_like ON public.events_eventguest USING btree (username varchar_pattern_ops);
CREATE INDEX events_eventguest_event_id_a37ebac7 ON public.events_eventguest USING btree (event_id);
CREATE INDEX events_eventguest_owner_id_ab061674 ON public.events_eventguest USING btree (owner_id);


CREATE TABLE public.guests_guestaccount (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	created_at timestamptz NOT NULL,
	updated_at timestamptz NOT NULL,
	username varchar(254) NOT NULL,
	"password" varchar(510) NOT NULL,
	status int4 NOT NULL,
	start_date timestamptz NULL,
	end_date timestamptz NULL,
	"name" varchar(510) NOT NULL,
	duration int4 NOT NULL,
	extension_count int4 NOT NULL,
	message text NOT NULL,
	owner_id int4 NULL,
	temp_owner_email varchar(254) NULL,
	CONSTRAINT guests_guestaccount_extension_count_check CHECK ((extension_count >= 0)),
	CONSTRAINT guests_guestaccount_pkey PRIMARY KEY (id),
	CONSTRAINT guests_guestaccount_username_key UNIQUE (username)
);
CREATE INDEX guests_guestaccount_owner_id_6df3160a ON public.guests_guestaccount USING btree (owner_id);
CREATE INDEX guests_guestaccount_username_7abee154_like ON public.guests_guestaccount USING btree (username varchar_pattern_ops);

CREATE OR REPLACE VIEW radcheck AS
select
    username AS id,
    username AS UserName,
    'Cleartext-Password' AS attribute,
    password AS Value,
    ':=' AS Op
from
    eduroam_eduroamaccount
where
    (status = 1);


CREATE OR REPLACE VIEW rad_vlan_override AS
SELECT 
    mac_address,
    vlan_id
FROM vlanoverride_vlanoverride 
WHERE 
    status = 1
    AND (start_date IS NULL OR start_date <= NOW())
    AND (end_date IS NULL OR end_date >= NOW());

CREATE OR REPLACE VIEW rad_mac_auth AS
SELECT 
    LOWER(REPLACE(mac_address, ':', '')) as username,
	password as tunnel_password
FROM iotdevices_iotdeviceaccount
WHERE 
    status = 1
    AND (start_date IS NULL OR start_date <= NOW())
    AND (end_date IS NULL OR end_date >= NOW());


CREATE OR REPLACE VIEW radcheck_guests AS
SELECT
    username,
    password
FROM
    public.events_eventguest
WHERE
    status = 1
    AND (start_date IS NULL OR start_date <= NOW())
    AND (end_date IS NULL OR end_date >= NOW())

UNION ALL

SELECT
    username,
    password
FROM
    public.guests_guestaccount
WHERE
    status = 1
    AND (start_date IS NULL OR start_date <= NOW())
    AND (end_date IS NULL OR end_date >= NOW());

/*
 * Table structure for table 'radacct'
 *
 */
CREATE TABLE IF NOT EXISTS radacct (
	RadAcctId		bigserial PRIMARY KEY,
	AcctSessionId		text NOT NULL,
	AcctUniqueId		text NOT NULL UNIQUE,
	UserName		text,
	Realm			text,
	NASIPAddress		inet NOT NULL,
	NASPortId		text,
	NASPortType		text,
	AcctStartTime		timestamp with time zone,
	AcctUpdateTime		timestamp with time zone,
	AcctStopTime		timestamp with time zone,
	AcctInterval		bigint,
	AcctSessionTime		bigint,
	AcctAuthentic		text,
	ConnectInfo_start	text,
	ConnectInfo_stop	text,
	AcctInputOctets		bigint,
	AcctOutputOctets	bigint,
	CalledStationId		text,
	CallingStationId	text,
	AcctTerminateCause	text,
	ServiceType		text,
	FramedProtocol		text,
	FramedIPAddress		inet,
	FramedIPv6Address	inet,
	FramedIPv6Prefix	inet,
	FramedInterfaceId	text,
	DelegatedIPv6Prefix	inet,
	Class			text
);
-- This index may be useful..
-- CREATE UNIQUE INDEX radacct_whoson on radacct (AcctStartTime, nasipaddress);

-- For use by update-, stop- and simul_* queries
CREATE INDEX radacct_active_session_idx ON radacct (AcctUniqueId) WHERE AcctStopTime IS NULL;

-- Add if you you regularly have to replay packets
-- CREATE INDEX radacct_session_idx ON radacct (AcctUniqueId);

-- For backwards compatibility
-- CREATE INDEX radacct_active_user_idx ON radacct (AcctSessionId, UserName, NASIPAddress) WHERE AcctStopTime IS NULL;

-- For use by onoff-
CREATE INDEX radacct_bulk_close ON radacct (NASIPAddress, AcctStartTime) WHERE AcctStopTime IS NULL;

-- and for common statistic queries:
CREATE INDEX radacct_start_user_idx ON radacct (AcctStartTime, UserName);

-- and, optionally
-- CREATE INDEX radacct_stop_user_idx ON radacct (acctStopTime, UserName);

-- and for Class
CREATE INDEX radacct_calss_idx ON radacct (Class);




/*
 * Table structure for table 'radgroupcheck'
 */
CREATE TABLE IF NOT EXISTS radgroupcheck (
	id			serial PRIMARY KEY,
	GroupName		text NOT NULL DEFAULT '',
	Attribute		text NOT NULL DEFAULT '',
	op			VARCHAR(2) NOT NULL DEFAULT '==',
	Value			text NOT NULL DEFAULT ''
);
create index radgroupcheck_GroupName on radgroupcheck (GroupName,Attribute);

/*
 * Table structure for table 'radgroupreply'
 */
CREATE TABLE IF NOT EXISTS radgroupreply (
	id			serial PRIMARY KEY,
	GroupName		text NOT NULL DEFAULT '',
	Attribute		text NOT NULL DEFAULT '',
	op			VARCHAR(2) NOT NULL DEFAULT '=',
	Value			text NOT NULL DEFAULT ''
);
create index radgroupreply_GroupName on radgroupreply (GroupName,Attribute);

/*
 * Table structure for table 'radreply'
 */
CREATE TABLE IF NOT EXISTS radreply (
	id			serial PRIMARY KEY,
	UserName		text NOT NULL DEFAULT '',
	Attribute		text NOT NULL DEFAULT '',
	op			VARCHAR(2) NOT NULL DEFAULT '=',
	Value			text NOT NULL DEFAULT ''
);
create index radreply_UserName on radreply (UserName,Attribute);
/*
 * Use this index if you use case insensitive queries
 */
-- create index radreply_UserName_lower on radreply (lower(UserName),Attribute);

/*
 * Table structure for table 'radusergroup'
 */
CREATE TABLE IF NOT EXISTS radusergroup (
	id			serial PRIMARY KEY,
	UserName		text NOT NULL DEFAULT '',
	GroupName		text NOT NULL DEFAULT '',
	priority		integer NOT NULL DEFAULT 0
);
create index radusergroup_UserName on radusergroup (UserName);
/*
 * Use this index if you use case insensitive queries
 */
-- create index radusergroup_UserName_lower on radusergroup (lower(UserName));

--
-- Table structure for table 'radpostauth'
--

CREATE TABLE IF NOT EXISTS radpostauth (
	id			bigserial PRIMARY KEY,
	username		text NOT NULL,
	pass			text,
	reply			text,
	CalledStationId		text,
	CallingStationId	text,
	authdate		timestamp with time zone NOT NULL default now(),
	Class			text
);
CREATE INDEX radpostauth_username_idx ON radpostauth (username);
CREATE INDEX radpostauth_class_idx ON radpostauth (Class);

/*
 * Table structure for table 'nas'
 */
CREATE TABLE IF NOT EXISTS nas (
	id			serial PRIMARY KEY,
	nasname			text NOT NULL,
	shortname		text NOT NULL,
	type			text NOT NULL DEFAULT 'other',
	ports			integer,
	secret			text NOT NULL,
	server			text,
	community		text,
	description		text
);
create index nas_nasname on nas (nasname);

/*
 * Table structure for table 'nasreload'
 */
CREATE TABLE IF NOT EXISTS nasreload (
	NASIPAddress		inet PRIMARY KEY,
	ReloadTime		timestamp with time zone NOT NULL
);


CREATE USER ${POSTGRES_REPLICATION_USER} WITH PASSWORD '${POSTGRES_REPLICATION_PASSWORD}';
GRANT USAGE ON SCHEMA public TO ${POSTGRES_REPLICATION_USER};

GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${POSTGRES_REPLICATION_USER};

CREATE SUBSCRIPTION all_tables_sub 
CONNECTION 'host=postgres port=5432 dbname=django user=${POSTGRES_REPLICATION_USER} password=${POSTGRES_REPLICATION_PASSWORD}'

PUBLICATION all_tables_pub;


/*
 * setup.sql -- PostgreSQL commands for creating the RADIUS user.
 *
 *	WARNING: You should change 'localhost' and 'radpass'
 *		 to something else.  Also update raddb/mods-available/sql
 *		 with the new RADIUS password.
 *
 */

/*
 *  Create default administrator for RADIUS
 *
 */
CREATE USER radius WITH PASSWORD '${POSTGRES_RADIUS_PASSWORD}';

/*
 *  The server can read the authorisation data
 *
 */

GRANT SELECT ON ALL TABLES IN SCHEMA public TO radius;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO radius;
GRANT USAGE ON SCHEMA public TO radius;

/*
 *  The server can write accounting and post-auth data
 *
 */
GRANT SELECT, INSERT, UPDATE on radacct TO radius;
GRANT SELECT, INSERT, UPDATE on radpostauth TO radius;

/*
 *  The server can read the NAS data
 *
 */
GRANT SELECT ON nas TO radius;

/*
 *  In the case of the "lightweight accounting-on/off" strategy, the server also
 *  records NAS reload times
 *
 */
GRANT SELECT, INSERT, UPDATE ON nasreload TO radius;

/*
 * Grant permissions on sequences
 *
 */
GRANT USAGE, SELECT ON SEQUENCE radreply_id_seq TO radius;
GRANT USAGE, SELECT ON SEQUENCE radusergroup_id_seq TO radius;
GRANT USAGE, SELECT ON SEQUENCE radgroupcheck_id_seq TO radius;
GRANT USAGE, SELECT ON SEQUENCE radgroupreply_id_seq TO radius;
GRANT USAGE, SELECT ON SEQUENCE radacct_radacctid_seq TO radius;
GRANT USAGE, SELECT ON SEQUENCE radpostauth_id_seq TO radius;
GRANT USAGE, SELECT ON SEQUENCE nas_id_seq TO radius;


EOSQL

