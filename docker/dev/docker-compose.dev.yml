services:
  freeradius:
    build:
      context: ./freeradius
      dockerfile: Dockerfile
    depends_on:
      postgres_radius:
        condition: service_healthy
    container_name: freeradius
    volumes:
      - radius_certs:/etc/raddb/certs
    networks:
      - mailnet
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'nc -u -z localhost 1812'"]
      interval: 10s
      timeout: 1s
      retries: 5
    ports:
      - "1812-1813:1812-1813/udp"
    tty: true
    command: -X

  postgres:
    image: postgres:15
    container_name: postgres
    env_file:
      - .env.dev
    volumes:
      - ./postgres/init-roundcube-db.sh:/docker-entrypoint-initdb.d/init-roundcube-db.sh
      - ./postgres/init-django-db.sh:/docker-entrypoint-initdb.d/init-django-db.sh
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mailnet
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_DJANGO_USER} -d $${POSTGRES_DJANGO_DB}'"]
      interval: 10s
      timeout: 1s
      retries: 5
    command:
      - "postgres" 
      - "-c"
      - "wal_level=logical"

  postgres_radius:
    image: postgres:15
    container_name: postgres_radius
    depends_on:
      myselfservice:
        condition: service_healthy
    env_file:
      - .env.dev
    volumes:
      - ./postgres_radius/init-radius-db.sh:/docker-entrypoint-initdb.d/init-radius-db.sh
      #- ./postgres_radius/schema.sql:/docker-entrypoint-initdb.d/y_schema.sql
      #- ./postgres_radius/setup.sql:/docker-entrypoint-initdb.d/z_setup.sql
      - postgres_data_radius:/var/lib/postgresql/data
    networks:
      - mailnet
    ports:
      - "2345:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U radius -d radius'"]
      interval: 10s
      timeout: 1s
      retries: 5
    command:
      - "postgres" 
      - "-c"
      - "wal_level=logical"

  openldap:
    image: osixia/openldap:latest
    container_name: openldap
    env_file:
      - .env.dev
    volumes:
      - ./openldap/bootstrap/schema:/container/service/slapd/assets/config/bootstrap/schema/custom
      - ./openldap/bootstrap/ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom
    ports:
      - "389:389"
    command: --copy-service
    networks:
      - mailnet

  mailserver:
    container_name: mailserver
    build: 
      context: ./mailserver
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - openldap
    env_file:
      - .env.dev
    volumes:
      - mail_data:/var/mail
    ports:
      - "25:25"
      - "143:143"
    networks:
      - mailnet

  roundcube:
    image: roundcube/roundcubemail:latest
    container_name: roundcube
    environment:
      ROUNDCUBEMAIL_DEFAULT_HOST: "tls://mailserver"
      ROUNDCUBEMAIL_SMTP_SERVER: "tls://mailserver"
      ROUNDCUBEMAIL_DB_TYPE: "pgsql"
      ROUNDCUBEMAIL_PLUGINS: "oidc_logout"
    env_file:
      - .env.dev
    depends_on:
      - postgres
      - mailserver
    volumes:
      - ./roundcube/config/:/var/roundcube/config
      - ./roundcube/plugins/oidc_logout:/var/www/html/plugins/oidc_logout
    ports:
      - "8081:80"
    networks:
      - mailnet

  keycloak-init:
    image: alpine:3.19
    volumes:
      - keycloak_import:/import
      - ./keycloak/import/realm-export.json.template:/import/realm-export.json.template
    env_file:
      - .env.dev
    command: >
      sh -c '
        cp /import/realm-export.json.template /import/realm-export.json &&
        sed -i "s/LDAP_ADMIN_PASSWORD/$${LDAP_ADMIN_PASSWORD}/g" /import/realm-export.json &&
        sed -i "s/ROUNDCUBEMAIL_OIDC_SECRET/$${ROUNDCUBEMAIL_OIDC_SECRET}/g" /import/realm-export.json &&
        sed -i "s/DJANGO_OIDC_SECRET/$${DJANGO_OIDC_SECRET}/g" /import/realm-export.json
      '
  keycloak:
    image: quay.io/keycloak/keycloak:26.1.0
    container_name: keycloak
    env_file:
      - .env.dev
    environment:
      KC_IMPORT: /opt/keycloak/data/import/realm-export.json
      KC_HEALTH_ENABLED: true
    command: start-dev --import-realm
    ports:
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - keycloak_import:/opt/keycloak/data/import
    depends_on:
      keycloak-init:
        condition: service_completed_successfully
      postgres:
        condition: service_started
      openldap:
        condition: service_started
    networks:
      - mailnet
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live']
      interval: 10s
      timeout: 1s
      retries: 5
      
  myselfservice:
    container_name: myselfservice
    build: 
      context: ../../myselfservice
      target: development
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
    volumes:
      - ../../myselfservice:/app
    environment:
      - DEBUG=True
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD-SHELL", "python manage.py check"]
      interval: 10s
      timeout: 3s
      retries: 10
    env_file:
      - ./.env.dev
    networks:
      - mailnet
    ports:
      - "8000:8000"

  tests:
    container_name: tests
    build:
      context: ./tests
    volumes:
      - radius_certs:/radius_certs:ro
    depends_on:
      keycloak:
        condition: service_healthy
      mailserver:
        condition: service_started  
      myselfservice:
        condition: service_healthy
      freeradius:
        condition: service_healthy
    networks:
      - mailnet

volumes:
  keycloak_import:
  keycloak_data:
  postgres_data:
  postgres_data_radius:
  mail_data:
  radius_certs:
networks:
  mailnet:
